zookeeper {
}

kafka {
  bootstrap {
    servers = ["127.0.0.1:9092"]
    servers = ${?KAFKA_BOOTSTRAP_SERVERS}
    # Can set/override this via: -DKAFKA_BOOTSTRAP_SERVERS.0=host:1000 -DKAFKA_BOOTSTRAP_SERVERS.1=host:1001
  }

  properties {
    "min.insync.replicas" = 2

    # Must be used in conjunction with min.insync.replicas, which can be set at broker level or (overriding) topic level
    # Quoted for consistency, even though they are not needed here since no "." is used.
    "acks" = all

    # Before Kafka 1.1 we would need to do the following:
    # max.in.flight.requests.per.connection = 1
    # The default is 5 - in case of retries (by default) there is a chance that messages will be sent out of order, if a batch has failed to be sent.
    # If you rely on key based ordering, this can be an issue.
    # This setting controls how many requests can be made in parallel i.e. set to 1 if you need to ensure ordering (may impact throughput)
    # Later versions of Kafka allow us to configure our producers as idempotent:
    # This setting implies: acks = all; retries = MAX_INT; max.in.flight.requests.per.connection = 5
    "enable.idempotence" = true

    "max.in.flight.requests.per.connection" = 5
  }
}

twitter {
  consumer {
    key = ""
    key = ${?TWITTER_CONSUMER_TOKEN_KEY}

    secret = ""
    secret = ${?TWITTER_CONSUMER_TOKEN_SECRET}
  }

  access {
    key = ""
    key = ${?TWITTER_ACCESS_TOKEN_KEY}

    secret = ""
    secret = ${?TWITTER_ACCESS_TOKEN_SECRET}
  }
}

elasticsearch {
  bootstrap {
    servers = ["http://127.0.0.1:9200"]
    servers = ${?ELASTIC_SEARCH_BOOTSTRAP_SERVERS}
    # Can set/override this via: -DELASTIC_SEARCH_BOOTSTRAP_SERVERS.0=http://host0:9200 -DELASTIC_SEARCH_BOOTSTRAP_SERVERS.1=https://host1:443
  }

  credentials {
    user = ""
    user = ${?ELASTIC_SEARCH_CREDENTIALS_USER}

    password = ""
    password = ${?ELASTIC_SEARCH_CREDENTIALS_PASSWORD}
  }
}